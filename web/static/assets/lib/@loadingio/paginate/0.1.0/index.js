// Generated by LiveScript 1.6.0
(function(){
  var paginate;
  paginate = function(o){
    var ref$, this$ = this;
    o == null && (o = {});
    if (o.fetch) {
      this._user_fetch = o.fetch;
    }
    this._evthdr = {};
    this._running = false;
    this._end = false;
    this._disabled = o.enabled != null ? !o.enabled : false;
    this._o = import$({
      boundary: 5,
      scrollDelay: 100,
      fetchDelay: 200,
      fetchOnScroll: false,
      fetchOnInit: false
    }, o);
    this.limit = o.limit || 20;
    this.offset = o.offset || 0;
    if (o.host) {
      this.host(o.host);
    }
    if (o.pivot) {
      this.pivot(o.pivot);
    }
    this.fetch = debounce(this._o.fetchDelay, this._fetch);
    this._pend = proxise(function(){
      if (!this$._running) {
        return Promise.resolve();
      }
    });
    if ((ref$ = this._o.fetchOnInit) === 'always' || ref$ === 'once') {
      this.fetch();
    }
    return this;
  };
  paginate.prototype = import$(Object.create(Object.prototype), {
    _user_fetch: function(){
      return new Promise(function(res, rej){
        return res([]);
      });
    },
    toggle: function(v){
      return this._disabled = v != null
        ? !v
        : !this._disabled;
    },
    on: function(n, cb){
      var this$ = this;
      return (Array.isArray(n)
        ? n
        : [n]).map(function(n){
        var ref$;
        return ((ref$ = this$._evthdr)[n] || (ref$[n] = [])).push(cb);
      });
    },
    fire: function(n){
      var v, res$, i$, to$, ref$, len$, cb, results$ = [];
      res$ = [];
      for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      v = res$;
      for (i$ = 0, len$ = (ref$ = this._evthdr[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    reset: function(o){
      var this$ = this;
      o == null && (o = {});
      return this._pend().then(function(){
        this$.offset = 0;
        this$._end = false;
        if (this$._o.fetchOnInit === 'always') {
          return this$.fetch();
        }
      });
    },
    fetchable: function(){
      return !(this._disabled || this._end || this._running);
    },
    isEnd: function(){
      return this._end;
    },
    obs: function(){
      var update, this$ = this;
      if (this._obs) {
        return this._obs;
      }
      update = function(ns){
        var p, h;
        if (!(ns.map(function(it){
          return it.isIntersecting;
        }).filter(function(it){
          return it;
        }).length && this$.fetchable())) {
          return;
        }
        p = ns.filter(function(it){
          return it.target === this$._pivot;
        }).length;
        h = ns.filter(function(it){
          return it.target === this$._host;
        }).length;
        if ((this$._o.fetchOnScroll && p) || (this$._o.fetchOnInit === 'lazy' && h && !this$.offset)) {
          return this$.fetch().then(function(it){
            return this$.fire('scroll.fetch', it);
          });
        }
      };
      this._obs = new IntersectionObserver(update, {});
      return this._obs;
    },
    _onScroll: function(){
      var h, this$ = this;
      if (!this.fetchable()) {
        return;
      }
      h = this._host;
      if (h.scrollHeight - h.scrollTop - h.clientHeight > this._o.boundary) {
        return;
      }
      return this.fetch().then(function(it){
        return this$.fire('scroll.fetch', it);
      });
    },
    host: function(h){
      var obs, n, this$ = this;
      if (!h) {
        return this._host;
      }
      obs = this.obs();
      if (this._host && this._scrollFunc) {
        n = this._host === document.scrollingElement
          ? document
          : this._host;
        n.removeEventListener('scroll', this._scrollFunc);
        this._scrollFunc = null;
      }
      if (this._host) {
        obs.unobserve(this._host);
      }
      this._host = typeof h === 'string' ? document.querySelector(h) : h;
      if (!this._host) {
        return;
      }
      if (this._o.fetchOnScroll && !this._pivot) {
        this._scrollFunc = function(e){
          return this$._onScroll(e);
        };
        n = this._host === document.scrollingElement
          ? document
          : this._host;
        n.addEventListener('scroll', this._scrollFunc);
      }
      return obs.observe(this._host);
    },
    pivot: function(p){
      var obs, n;
      if (!p) {
        return this._pivot;
      }
      obs = this.obs();
      if (this._pivot) {
        obs.unobserve(this._pivot);
      }
      this._pivot = typeof p === 'string' ? document.querySelector(p) : p;
      obs.observe(this._pivot = p);
      if (this._host && this._scrollFunc) {
        n = this._host === document.scrollingElement
          ? document
          : this._host;
        n.removeEventListener('scroll', this._scrollFunc);
        return this._scrollFunc = null;
      }
    },
    _fetch: function(opt){
      var this$ = this;
      opt == null && (opt = {});
      if (!this.fetchable()) {
        return res([]);
      }
      this.fire('fetching');
      this._running = true;
      return this._user_fetch().then(function(r){
        r == null && (r = []);
        this$._running = false;
        this$.offset += r.length || 0;
        this$.fire('fetch', r);
        if (r.length < this$.limit) {
          this$._end = true;
          this$.fire(!this$.offset ? 'empty' : 'finish');
        }
        this$._pend.resolve();
        return r;
      });
    }
  });
  if (typeof module != 'undefined' && module !== null) {
    module.exports = paginate;
  } else if (typeof window != 'undefined' && window !== null) {
    window.paginate = paginate;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
