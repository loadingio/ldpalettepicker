doctype html
include @/@loadingio/bootstrap.ext/index.pug
include @static/assets/lib/ldpalettepicker/dev/ldpp.pug
html(lang="en")
  - var colors = ["#e5261f","#f7955e","#ffe06b","#aeec51","#58c8ec","#4a5df0","#d062f0"]
  - var actions = [["view", "View"], ["export", "Export"]]
  head(prefix="og: http://ogp.me/ns#")
    meta(charset="utf-8")
    meta(name='viewport',content='width=device-width, initial-scale=1.0')
    link(href="https://fonts.googleapis.com/css?family=Oxygen:300,700|Roboto:300,500,700|BenchNine|Varela+Round&display=swap", rel="stylesheet")
    +css("assets/lib/bootstrap/main/dist/css/bootstrap.min.css")
    +css("assets/lib/@loadingio/bootstrap.ext/main/index.min.css")
    +css("assets/lib/@loadingio/ldcolorpicker/main/index.min.css")
    +css("assets/lib/ldcover/main/index.min.css")
    +css("assets/lib/ldslider/main/index.min.css")
    +css("assets/lib/ldpalettepicker/dev/index.min.css")
    +css("css/index.css")

  body
    .w-100.h-50.bg-light: .vertical-center
      .w-100: .w-50.mx-auto.text-center
        h1.font-weight-bold ldPalettePicker
        .text-center palette utilities including editor, picker and palette wrapper.
    .w-1024.rwd.mt-4.mx-auto.p-4.typeset.headling-contrast
      h2 About
      p ldPlaettePicker is a set of tool for manipulating color palettes. It contains three parts:
      ul
        li #[b ldPalette] ( #[code ldpalette] ) - Palette wrapper, for manipulating palette.
        li #[b ldPaletteEditor] ( #[code ldpe] ) - API and interface for editing palette.
        li #[b ldPalettePicker] ( #[code ldpp] ) - Widget for picking and editing palette.

      h2 Usage
      p ldPalette is designed to be used along with Pug, so in the following examples we will use Pug instead of HTML. To use ldPalettePicker, download and include the required file:
      .example.code-block.
        include path-to/ldpp.pug
        link(rel="stylesheet",type="text/css",href="path-to/ldpp.css")
        script(src="path-to/ldpp.js")

      h2 ldPalette
      p There are two parts of ldPalette: #[code ldPalette JS Object], and #[code ldPalette HTML Construct].
      p a ldPalette object is like this: 

      .code-block.example.
        {
          name: "Palette Name",
          tag: ["tag", "list", ...],
          # either one of below
          colors: [ldcolor, ldcolor, ...]                 # type agnoistic color. we should internally use this
          colors: [{hex: "#999", tag: [...]}, ...]        # hex. color follows ldcolor format.
          colors: ["#999", ...]                           # compact but losing color tags
          # deprecated and we should use ldcolor directly instead of  a indirect object with value member.
          colors: [{value: ldcolor,...}, {value: ldcolor, ...}]
        }

      p For visualizing a palette in HTML, use #[code ldp] class with following structure:
      .code-block.example.
        .ldp #[span.text-secondary - container of this palette.]
          .colors #[span.text-secondary - wrapper for colors div]
            .ctrl #[span.text-secondary - contains buttons shown when hovering. ]
              div(data-action="...") #[span.text-secondary - button for triggering certain action]
            .color #[span.text-secondary - blocks colored by setting background attribute in inline style.]
          .name #[span.text-secondary - optional name containing the name of this palette.]
      p Following is an example of a palette:
      .code-block.example.
        .ldp
          .colors
            .ctrl
              div(data-action="view") \#[i.i-eye]View
              div(data-action="edit") \#[i.i-chevron-down]Export
            .colors
              .color(style="background:#ff0")
              .color(style="background:#ff0")
              ...
          .name Palette
      p Result:
      .example
        .ldp(style="width:280px")
          .colors
            .ctrl
              div(data-action="view") #[i.i-eye]View
              div(data-action="export") #[i.i-chevron-down]Export
            each c in colors
              .color(style=`background:${c}`)
          .name Rainbow
      p You may not want to type the whole construct by yourself, so we also provide a Pug mixin for quickly setup the construct:
      .example.code-block.
        +ldp(
          "name",
          ["color1", "color2", ...],
          [["action-1", "action-text-1"], ...]
          "space separated additional classes"
        )
      h3 Customization
      p #[code ldp] provides the basic styles and DOM construct. To further styling it, you can customize it yourself by CSS. ldPalette provides some CSS classes for basic variations, It's at your discretion to use them.
      p Here are some common CSS styles you'd probably like to customize:
      ul
        li #[code .ldp] - #[code width] for width of palette.
        li #[code .ldp] - #[code font-size] for font size of palette.
        li #[code .colors] - #[code height] for height of palette.
      p The size, by default, is proportional to container font-size and designed to match the size of bootstrap form-control, but it's always customizable. Control the size by applying one of the #[code ldp-lg], #[code ldp-sm] CSS classes.
      .example
        .row
          .col-md-4
            .text-center: b ldp-lg
            .row.mt-2
              .col-md-6: +ldp("Palette", colors, actions, "ldp-lg w-100")
              .col-md-6: input.form-control.form-control-lg
          .col-md-4
            .text-center: b normal
            .row.mt-2
              .col-md-6: +ldp("Palette", colors, actions, "w-100")
              .col-md-6: input.form-control
          .col-md-4
            .text-center: b ldp-sm
            .row.mt-2
              .col-md-6: +ldp("Palette", colors, actions, "ldp-sm w-100")
              .col-md-6: input.form-control.form-control-sm

      h3 API
      p ldPalette ships along with some helper APIs: 
      ul
        li
          span #[code ldpalette.convert(palette, format)] - convert palette to certain format, and return corresponding object. 4 formats are currently available:
          ul
            li SVG
            li PNG
            li JSON
            li SCSS
        li #[code ldpalette.download(palette, format)] - trigger downloading of a converted palette.
      p Following is a demonstration of calling converting and downloading of a palette.
      .d-flex.mx-auto.w-50.mt-4.justify-content-center
        .dropdown.mr-2
          .btn.btn-primary.btn-lg.btn-block.dropdown-toggle(data-toggle="dropdown") To Image
          .dropdown-menu
            a.dropdown-item(onclick="image('png')") PNG
            a.dropdown-item(onclick="image('json')") JSON
            a.dropdown-item(onclick="image('scss')") SCSS
            a.dropdown-item(onclick="image('svg')") SVG
        .dropdown
          .btn.btn-primary.btn-lg.btn-block.dropdown-toggle(data-toggle="dropdown") Download
          .dropdown-menu
            a.dropdown-item(onclick="down('png')") PNG
            a.dropdown-item(onclick="down('json')") JSON
            a.dropdown-item(onclick="down('scss')") SCSS
            a.dropdown-item(onclick="down('svg')") SVG
      #image-output.shadow-sm.border.w-50.mx-auto.mt-4

      h2 ldPaletteEditor
      p ldPalettePicker ships with a bunch of pre-built palettes, but sometimes user just need to customize their own. This could be done through the ldPaletteEditor.
      p ldPaletteEditor is more complicated than simply a palette, so we prepare the DOM construct via a Pug mixin:
      .row.botder.p-2.no-gutters
        .col-md-4: .example.code-block.h-100.
          .ldpe: +ldpe
          script.
            new ldpe({
              root: '.ldpe'
            });
        .col-md-8.pl-1: .card: .card-body: #ldpe-ex1.w-100.mx-auto.ldpe: +ldpe
      p ldPaletteEditor provides following APIs:
      ul
        li #[code getPal] - get the current palette, in ldPalette format.
        li
          span #[code init(opt)] - initialize editor. opt is an object with following member:
          ul
            li pal - default palette, in ldPalette format.
        li #[code undo] - undo the last edit action.
        li #[code clearLog] - clear edit history.

      h2 ldPalettePicker
      p ldPalettePicker is an integrated widget for choosing, managing and editing palettes. It contains at least 3 tabs: built-in palettes, saved palettes, and edit panel.
      p To create a ldPalettePicker, it's similar to how to prepare a ldPaletteEditor; prepare the HTML with Pug mixin, and initialize it with JavaScript. However, there are two notes about initializing ldPalettePicker:
      ul
        li We will need to set container's height for ldPalettePicker to be properly shown, minimal 570px:
        li We will need to prepare some builtin palettes to be listed in the default panel. ldPalettePicker ships with a default list of palette so we will use it to demonstrate here.
      .row.botder.p-2.no-gutters
        .col-md-5: .example.code-block.h-100.
          .ldpp(style="height:570px")
            +ldpp
          script.
            new ldpp({
              root: '.ldpp',
              palettes:
                ldpp.get(
                  'default'
                )
            });
        .col-md-7.pl-1: .card: .card-body: #ldpp-ex1.w-100.mx-auto.ldpp(style="height:570px"): +ldpp

      h3 Work with ldcover
      p ldPalettePicker is commonly used along with ldcover, which popups when user toggles the editor / picker. Toggling demo modals by clicking buttons below:
      .btn.btn-lg.btn-primary.mr-2(onclick="ldcvPicker.toggle(true)") ldPalettePicker
      .btn.btn-lg.btn-primary(onclick="ldcvEditor.toggle(true)") ldPaletteEditor

      #ldcv-picker.ldcv.default-size: .base: .inner.ldpp: +ldpp
      #ldcv-editor.ldcv.default-size: .base(style="height:fit-content"): .inner.p-4: .ldpe
        +ldpe
        hr
        .btn.btn-outline-dark.mr-2 Undo
        .form-inline.float-right
          .input-group.mr-2(style="width:210px")
            input.form-control(placeholder="Palette Name..")
            .input-group-append
              .btn.btn-outline-dark Save
          .btn.btn-outline-dark.mr-2 Download
          .btn.btn-outline-dark(data-ldcv-set="") Close
      +nbr(4)

    +script("assets/lib/bootstrap.native/main/dist/bootstrap-native-v4.min.js")
    +script("assets/lib/@loadingio/ldquery/main/index.min.js")
    +script("assets/lib/@loadingio/ldpage/main/index.min.js")
    +script("assets/lib/ldcolor/main/index.min.js")
    +script("assets/lib/@loadingio/ldcolorpicker/main/index.js")
    +script("assets/lib/@loadingio/debounce.js/main/index.min.js")
    +script("assets/lib/@loadingio/vscroll/main/index.min.js")
    +script("assets/lib/ldcover/main/index.min.js")
    +script("assets/lib/ldslider/main/index.js")
    +script("assets/lib/ldloader/main/index.min.js")
    +script("assets/ldpp.palettes.js")
    +script("assets/lib/ldpalettepicker/dev/ldp.js")
    +script("assets/lib/ldpalettepicker/dev/ldpe.js")
    +script("assets/lib/ldpalettepicker/dev/ldpp.js")
    +script("js/index.js")
